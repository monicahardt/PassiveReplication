// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: grpc/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributedDictionaryClient is the client API for DistributedDictionary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributedDictionaryClient interface {
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddRes, error)
	Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*ReadRes, error)
	GetLeaderRequest(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LeaderMessage, error)
	Replicate(ctx context.Context, in *ReplicationAdd, opts ...grpc.CallOption) (*ReplicationAddRes, error)
}

type distributedDictionaryClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedDictionaryClient(cc grpc.ClientConnInterface) DistributedDictionaryClient {
	return &distributedDictionaryClient{cc}
}

func (c *distributedDictionaryClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddRes, error) {
	out := new(AddRes)
	err := c.cc.Invoke(ctx, "/Passivereplication.DistributedDictionary/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedDictionaryClient) Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*ReadRes, error) {
	out := new(ReadRes)
	err := c.cc.Invoke(ctx, "/Passivereplication.DistributedDictionary/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedDictionaryClient) GetLeaderRequest(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LeaderMessage, error) {
	out := new(LeaderMessage)
	err := c.cc.Invoke(ctx, "/Passivereplication.DistributedDictionary/GetLeaderRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedDictionaryClient) Replicate(ctx context.Context, in *ReplicationAdd, opts ...grpc.CallOption) (*ReplicationAddRes, error) {
	out := new(ReplicationAddRes)
	err := c.cc.Invoke(ctx, "/Passivereplication.DistributedDictionary/Replicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributedDictionaryServer is the server API for DistributedDictionary service.
// All implementations must embed UnimplementedDistributedDictionaryServer
// for forward compatibility
type DistributedDictionaryServer interface {
	Add(context.Context, *AddReq) (*AddRes, error)
	Read(context.Context, *ReadReq) (*ReadRes, error)
	GetLeaderRequest(context.Context, *Empty) (*LeaderMessage, error)
	Replicate(context.Context, *ReplicationAdd) (*ReplicationAddRes, error)
	mustEmbedUnimplementedDistributedDictionaryServer()
}

// UnimplementedDistributedDictionaryServer must be embedded to have forward compatible implementations.
type UnimplementedDistributedDictionaryServer struct {
}

func (UnimplementedDistributedDictionaryServer) Add(context.Context, *AddReq) (*AddRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedDistributedDictionaryServer) Read(context.Context, *ReadReq) (*ReadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedDistributedDictionaryServer) GetLeaderRequest(context.Context, *Empty) (*LeaderMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderRequest not implemented")
}
func (UnimplementedDistributedDictionaryServer) Replicate(context.Context, *ReplicationAdd) (*ReplicationAddRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replicate not implemented")
}
func (UnimplementedDistributedDictionaryServer) mustEmbedUnimplementedDistributedDictionaryServer() {}

// UnsafeDistributedDictionaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributedDictionaryServer will
// result in compilation errors.
type UnsafeDistributedDictionaryServer interface {
	mustEmbedUnimplementedDistributedDictionaryServer()
}

func RegisterDistributedDictionaryServer(s grpc.ServiceRegistrar, srv DistributedDictionaryServer) {
	s.RegisterService(&DistributedDictionary_ServiceDesc, srv)
}

func _DistributedDictionary_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedDictionaryServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Passivereplication.DistributedDictionary/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedDictionaryServer).Add(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedDictionary_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedDictionaryServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Passivereplication.DistributedDictionary/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedDictionaryServer).Read(ctx, req.(*ReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedDictionary_GetLeaderRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedDictionaryServer).GetLeaderRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Passivereplication.DistributedDictionary/GetLeaderRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedDictionaryServer).GetLeaderRequest(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedDictionary_Replicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicationAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedDictionaryServer).Replicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Passivereplication.DistributedDictionary/Replicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedDictionaryServer).Replicate(ctx, req.(*ReplicationAdd))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributedDictionary_ServiceDesc is the grpc.ServiceDesc for DistributedDictionary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributedDictionary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Passivereplication.DistributedDictionary",
	HandlerType: (*DistributedDictionaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _DistributedDictionary_Add_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _DistributedDictionary_Read_Handler,
		},
		{
			MethodName: "GetLeaderRequest",
			Handler:    _DistributedDictionary_GetLeaderRequest_Handler,
		},
		{
			MethodName: "Replicate",
			Handler:    _DistributedDictionary_Replicate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto.proto",
}
